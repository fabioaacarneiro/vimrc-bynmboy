
" This Setup for Vim or Nvim has make by me, Fabio Carneiro,
" for more information of my work, see my website in portuguese
" language < www.fabioaacarneiro.com.br >
" my youtube channel < youtube.com/fabiocarneiro >
" Use the internal diff if available.
" Otherwise use the special 'diffexpr' for Windows.
if &diffopt !~# 'internal'
  set diffexpr=MyDiff()
endif
function MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg1 = substitute(arg1, '!', '\!', 'g')
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg2 = substitute(arg2, '!', '\!', 'g')
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  let arg3 = substitute(arg3, '!', '\!', 'g')
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      if empty(&shellxquote)
        let l:shxq_sav = ''
        set shellxquote&
      endif
      let cmd = '"' . $VIMRUNTIME . '\diff"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  let cmd = substitute(cmd, '!', '\!', 'g')
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3
  if exists('l:shxq_sav')
    let &shellxquote=l:shxq_sav
  endif
endfunction

"------------------------------ Plugins Session
call plug#begin()
Plug 'sts10/vim-pink-moon'
Plug 'morhetz/gruvbox'
Plug 'scrooloose/nerdtree'
Plug 'sirver/ultisnips'
"Plug 'honza/vim-snippets'
Plug 'ervandew/supertab'
Plug 'w0rp/ale'
Plug 'sheerun/vim-polyglot'
"Plug 'shougo/neocomplete.vim'
Plug 'jiangmiao/auto-pairs'
Plug 'vim-scripts/AutoComplPop'
Plug 'vim-test/vim-test'
Plug 'sainnhe/edge'
call plug#end()

"------------------------------ Sets Session
set number
set title
set relativenumber
set tabstop=4 softtabstop=4 shiftwidth=4 noexpandtab

"------------------------------ Colorscheme Session
set background=dark
"set background=light

"colorscheme gruvbox
colorscheme edge
"colorscheme pink-moon

"------------------------------ Leader key Session
let mapleader = ","
nnoremap <leader>e :vsplit ~/.vimrc <cr>
nnoremap <leader>s :source ~/.vimrc <cr>
nnoremap <Leader>" viw<esc>a"<esc>bi"<esc>ela
nnoremap <Leader>' viw<esc>a'<esc>bi'<esc>ela
nnoremap <Leader>( viw<esc>a)<esc>bi(<esc>ela
nnoremap <Leader>{ viw<esc>a}<esc>bi{<esc>ela
nnoremap <Leader>[ viw<esc>a]<esc>bi[<esc>ela
nnoremap <Leader>< viw<esc>a><esc>bi<<esc>ela
nnoremap <Leader>/ <esc>I // ~ <esc> A
nnoremap <Leader># <esc>I # ~ <esc> A
nnoremap <Leader>u :UltiSnipsEdit <cr>

"------------------------------ Variables Session
let g:UltiSnipsJumpForwardTrigger="<TAB>"
let g:UltiSnipsJumpBackwardTrigger="<S-TAB>"
let g:UltiSnipsEditSplit="vertical"
let g:SuperTabDefaultCompletionType = "<c-n>"

"------------------------------ Map keys Session
map <F2> :NERDTreeToggle <CR>
map <F3> :!javac "%" && java "%" <CR>
map <F4> :!luac "%" && lua "%" <CR>
map <F9> :!g++ -c "%" && g++ main.o -o sfml-app -lsfml-graphics -lsfml-window -lsfml-system && ./sfml-app <CR>

"------------------------------ My personal keys combination
"----- Clone current line
inoremap <c-d> <esc>VypA
"----- Cut current line
inoremap <c-x> <esc>Vx
"----- Save actual file which permission ! and back to insert mode
nnoremap <c-s> :w! <cr> A
"----- Command bellow open cmd windows, change for your terminal linux
nnoremap <C-t> :!cmd <CR>
"----- Save command whith s
nnoremap <s> :w <CR> A
"----- Exit command whith Ctrl + q
nnoremap <C-q> :q! <CR>
"----- Save command which q
nnoremap <q> :q <CR>

" in GVim on windows or linux to open explorer or file manager 
" to open a file whith " Ctrl + o " discoment line bello
"nnoremap <C-o> :browse open <CR>

" in Gvim on windows or linux to open explorer or file manager 
" to open 'save as' explorer whith " Ctrl + s " discoment line bellow
"nnoremap <C-s> :browse save <CR>

"------------------------------ Swap Files Session
fun! MkdirIfNeeded(dir, flags, permissions)
  if !isdirectory(a:dir)
    call mkdir(a:dir, a:flags, a:permissions)
  endif
endfun

" Set (& create if needed) a temp directory to keep backup & swap files
if has('win32')
     let whoami = substitute(system("whoami /LOGONID"), '\n', '', '')
     let tmpdir = 'C:/tmp/vim_' . whoami
else
     let whoami = substitute(system("whoami"), '\n', '', '')
     let tmpdir = '/var/tmp/vim_' . whoami
endif
call MkdirIfNeeded(tmpdir, 'p', 0700)
   
let &backupdir = tmpdir
let &dir = tmpdir
let &undodir = tmpdir
